轻松读物：
http://www.open-open.com/lib/view/open1325131828249.html
------------------------------------------------------------------


http://blog.csdn.net/linvo/article/details/5752773

安装Erlang环境
1、下载： http://erlang.org/download.html 
自己根据需要下载源码包或win的二进制包
2、安装：
windows环境就没啥好说的了，一路next~
主要说下linux环境，其实我用的ubuntu10.04已经预装了erlang，版本是RB13B03，但是貌似不支持最新版的RabbitMQ
对于想使用最新版RabbitMQ或还没有安装erlang环境的童鞋，需要重新安装下最新版的erlang
目前Erlang官方最新版本是R14A， 首先需要先安装一些依赖包
 
sudo apt-get install build-essential 
sudo apt-get install libncurses5-dev 
sudo apt-get install m4 
sudo apt-get install libssl-dev
sudo apt-get install libc6
sudo apt-get install unixODBC
sudo apt-get install unixODBC-devel
sudo apt-get install gcj -----------------》好几十兆，主要用于java，暂时对我没用，所以我没装它:P
正式开始装了
./configure --without-javac ----------》因为我没有安装gcj，所以configure时关闭了javac选项
make 
sudo make install
没意外的话erlang就装完了，可以用whereis erlang看一下
 
安装RabbitMQ
ubuntu用户的话其实可以直接使用apt-get自动化搞定
sudo apt-get install rabbitmq-server
安装完毕后会自动启动服务，一切就这么简单:)
下面说下一般方法
 
1、下载：http://www.rabbitmq.com/server.html
普通linux用户建议下载普通源码包 Packaged for generic Unix systems
windows用户就直接下载windows包 Packaged for Windows systems
2、安装（linux&windows）：
其实RabbitMQ现在已经算是个绿色软件，免安装
一般建议解压后，直接把整个目录拷贝到erlang的lib下
3、运行（linux&windows）：
rabbitmq中sbin目录下是相关的工具脚本
通过执行该脚本即可运行（非守护）
【linux】sudo rabbitmq_server-1.8.1/sbin/rabbitmq-server
【windows】rabbitmq_server-1.8.1/sbin/rabbitmq-server.bat
关于windows用户：
1、需要设置环境变量ERLANG_HOME为erlang的根目录（具体就不用细说了吧~）
2、若需服务方式运行可以使用rabbitmq-service.bat进行安装服务（win7用户注意权限问题）
 
 
安装py-amqplib
正如那篇《[RabbitMQ+Python入门经典] 兔子和兔子窝》所说
根据你的需求，py-amqplib或者txAMQP都是可以的。因为是基于Twisted的，txAMQP可以保证用异步IO构建超高性能的AMQP程序。但是Twisted编程本身就是一个很大的主题……因此清晰起见，我们打算用 py-amqplib。
1、下载：http://barryp.org/software/py-amqplib/
2、安装：
非常easy，解压后进入目录直接
【linux】sudo ./setup.py install
【windows】python setup.py install
欧了，安装完毕，可以在python中import了:)
 
简单Demo测试
 
py-amqplib中带有简单的demo，在amqplib-0.6/demo中，我们先用这俩测试下消息的发送和接受
 
demo_receive.py -------------------》消息消费者
demo_send.py ----------------------》消息生产者
运行RabbitMQ后，先运行 ./demo_receive.py，创建Broker（其实就是交换机和队列啦）
接着另开一终端，运行 ./demo_send.py "hello, Linvo"
哇，在第一个终端显示出来了，好神奇啊~~~
 
运行时可以指定RabbitMQ的host、userid、password等参数，默认host是本机，userid和password都是guest
自己可以通过rabbitmqctl工具来删除、新建用户，并设置权限等
./rabbitmqctl delete_user guest -------》删除默认的guest用户
./rabbitmqctl add_user linvo 111 ---------》添加新用户linvo，密码111
./rabbitmqctl set_permissions -p / linvo ".*" ".*" ".*" -----------》设置linvo在/的虚拟主机的权限和之前的guest一样
PS：暂时没弄懂明白具体的权限正则规则 囧@&^%$…… 
再测试就改这样了
 
./demo_receive.py -u linvo -p 111
./demo_send.py -u linvo -p 111 "hello,Linvo"
 
rabbitmqctl的更多功能可参考官方文档 http://www.rabbitmq.com/rabbitmqctl.1.man.html，或者自行google:P
 
DIY Demo测试
自己也依葫芦画瓢了一个:D
receive.py
[python] view plain copy print?
#!/usr/bin/env python  
#coding=utf-8  
import amqplib.client_0_8 as amqp  
def showmsg(msg):  
    print msg.body  
    msg.channel.basic_ack(msg.delivery_tag)  
    if msg.body == 'quit':  
        msg.channel.basic_cancel(msg.consumer_tag)  
def main():  
    server = {'host':'localhost', 'userid':'linvo', 'password':'111', 'ssl':False}  
    x_name = 'x1'  
    q_name = 'q1'  
    conn = amqp.Connection( server['host'],   
                            userid=server['userid'],   
                            password=server['password'],   
                            ssl=server['ssl'])  
    ch = conn.channel()  
    ch.access_request('/data', active=True, read=True)  
    ch.exchange_declare(exchange=x_name, type='fanout', durable=True, auto_delete=False)  
    ch.queue_declare(queue=q_name, durable=True, exclusive=False, auto_delete=False)  
    ch.queue_bind(queue=q_name, exchange=x_name)  
    ch.basic_consume(q_name, callback=showmsg)  
    while ch.callbacks:  
        ch.wait()  
    ch.close()  
    conn.close()  
if __name__ == '__main__':  
    main()  
 
 
send.py
[python] view plain copy print?
#!/usr/bin/env python  
#coding=utf-8  
import amqplib.client_0_8 as amqp  
def main():  
    server = {'host':'localhost', 'userid':'linvo', 'password':'111', 'ssl':False}  
    x_name = 'x1'  
      
    conn = amqp.Connection( server['host'],   
                userid=server['userid'],  
                password=server['password'],   
                ssl=server['ssl'])  
    ch = conn.channel()  
    ch.access_request('/data', active=True, write=True)  
    ch.exchange_declare(exchange=x_name, type='fanout', durable=True, auto_delete=False)  
    retry = True  
    while retry:  
        msg_body = raw_input('>')  
        msg = amqp.Message(msg_body, content_encoding='UTF-8')  
        msg.properties['delivery_mode'] = 2  
        ch.basic_publish(msg, x_name)  
          
        if msg_body == 'quit':  
            retry = False  
      
    ch.close()  
    conn.close()  
if __name__ == '__main__':  
    main()  
 
 
发送消息

 
接收消息
------------------------------------------------------------------
转载自：http://blog.csdn.net/clementad/article/details/51317315



版权声明：本文为原创文章，转载请注明转自Clement-Xu的csdn博客。
安装步骤（rpm包安装）：
rpm安装官网：http://www.rabbitmq.com/install-rpm.html
下载rpm并安装：

    CentOs：

wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-3.6.1-1.noarch.rpm
rpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc
yum install rabbitmq-server-3.6.1-1.noarch.rpm （会提示下载和安装erlang等依赖包）

    SUSE：

wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-3.6.1-1.suse.noarch.rpm
zypper install rabbitmq-server-3.6.1-1.suse.noarch.rpm （会提示下载和安装erlang等依赖包）

启动：
service rabbitmq-server start/stop/status

注册为开机启动：chkconfig rabbitmq-server on

缺省的log路径：
/var/log/rabbitmq

查看状态：
rabbitmqctl status
可以查看到缺省监听端口：
{listeners,[{clustering,25672,"::"},{amqp,5672,"::"}]},

配置文件：
环境变量配置：vi /etc/rabbitmq/rabbitmq-env.conf
RabbitMQ配置：vi /etc/rabbitmq/rabbitmq.config

用户管理：
新建用户：rabbitmqctl add_user <user> pwd
删除用户:   rabbitmqctl delete_user <user>
查看用户列表：rabbitmqctl  list_users

用户权限：
查看所有用户的权限：rabbitmqctl list_permissions
设置用户权限：rabbitmqctl set_permissions <user> '.*' '.*' '.*'   （<conf> <write> <read>，正则表达式，'.*'表示所有权限）
清除用户权限：rabbitmqctl  clear_permissions <user>

各类角色：

    none
        不能访问 management plugin 
     management

        用户可以通过AMQP做的任何事外加： 
        列出自己可以通过AMQP登入的virtual hosts   
        查看自己的virtual hosts中的queues, exchanges 和 bindings 
        查看和关闭自己的channels 和 connections 
        查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。 
     policymaker
        management可以做的任何事外加： 
        查看、创建和删除自己的virtual hosts所属的policies和parameters 
    monitoring
        management可以做的任何事外加：
        列出所有virtual hosts，包括他们不能登录的virtual hosts
        查看其他用户的connections和channels
        查看节点级别的数据如clustering和memory使用情况
        查看真正的关于所有virtual hosts的全局的统计信息
    administrator
        policymaker和monitoring可以做的任何事外加:
        创建和删除virtual hosts
        查看、创建和删除users
        查看创建和删除permissions
        关闭其他用户的connections


设置用户角色：rabbitmqctl  set_user_tags <user> [administrator | monitoring | policymaker | management]

权限和角色参考：http://www.rabbitmq.com/access-control.html

启用RabbitMQWeb管理插件：
rabbitmq-plugins enable rabbitmq_management
访问：http://<server-name>:15672/

打开CentOS防火墙：
firewall-cmd --zone=public --add-port=15672/tcp --permanent
firewall-cmd --reload


另外：不支持rpm包的linux系统，可以直接解压rabbitmq-server-generic-unix-xxx.tar.xz文件：
下载：http://www.rabbitmq.com/install-generic-unix.html

下载后直接解压：
xz -d rabbitmq-server-generic-unix-3.6.1.tar.xz
tar -xvf rabbitmq-server-generic-unix-3.6.1.tar

创建一个软连接：
ln -s rabbitmq_server-3.6.1 rabbitmq

启动：
cd rabbitmq_server-3.6.1
（或使用软连接：cd rabbitmq）
sbin/rabbitmq-server -detached
或：service rabbitmq-server start/stop/start/status

修改开机启动脚本：vi/etc/init.d/boot.local
/opt/app/rabbitmq_server-3.6.1/sbin/rabbitmq-server  -detached
或：注册为开机启动：chkconfig rabbitmq-server on

可能需要先安装下面的依赖包：

安装Erlang：
官网：http://www.erlang.org/downloads
wget http://erlang.org/download/otp_src_18.3.tar.gz
tar -zxvf otp_src_18.3.tar.gz
cd otp_src_18.3
export ERL_TOP=`pwd`
./configure
（注：如果提示找不到curses library错误，需要先安装ncurses）
make
make install
缺省安装路径： /usr/local/bin/erl
执行命令：erl

安装ncurses：
tar zxvf ncurses-5.9.tar.gz
cd ncurses-5.9
./configure --with-shared  --prefix=/usr
make
make install

